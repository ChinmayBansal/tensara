datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  refreshToken  String?   @unique
  lastLogin     DateTime?

  accounts     Account[]
  problems     Problem[]
  submissions  Submission[]
  RevokedToken RevokedToken[]
  Session      Session[]

  @@index([email])
  @@index([createdAt])
  @@index([refreshToken])
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RevokedToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  expiresAt DateTime
  reason    String?
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([jti])
  @@index([expiresAt])
}

model Problem {
  id String @id @default(cuid())

  title       String
  slug        String     @unique
  description String?
  difficulty  Difficulty
  author      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
  testCases   TestCase[]
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?

  @@index([author])
  @@index([difficulty])
  @@index([slug])
}

model Submission {
  id String @id @default(cuid())

  name String @db.Text
  code String @db.Text

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  benchmarks BenchmarkResult[]

  createdAt DateTime         @default(now())
  status    SubmissionStatus
  callId    String?
  isPublic  Boolean          @default(false)

  @@index([userId])
  @@index([problemId])
  @@index([createdAt])
}

model TestCase {
  id String @id @default(cuid())

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String

  input    Json    @db.JsonB
  expected Json    @db.JsonB
  isHidden Boolean @default(true)

  @@index([problemId])
}

model BenchmarkResult {
  id String @id @default(cuid())

  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String

  gpuType  String
  timeMs   Float
  memoryMB Float
  logs     String? @db.Text
  verified Boolean @default(false)

  @@index([submissionId])
  @@index([gpuType])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum SubmissionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  TIMEOUT
}
